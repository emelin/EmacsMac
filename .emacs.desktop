;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Thu Aug 29 15:44:54 2013
;; Desktop file format version 206
;; Emacs version 24.3.50.1

;; Global section:
(setq desktop-saved-frameset '(frameset (:version 1 :app (desktop . "206") :name "kang@Yukang.local 2013-08-29 15:44:54") ((((fontsize . 0) (font . "-apple-Monaco-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 2) (vertical-scroll-bars) (foreground-color . "#DCDCCC") (background-color . "#3F3F3F") (line-spacing) (left-fringe . 0) (right-fringe . 0) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (icon-type) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (alpha) (fullscreen . fullboth) (horizontal-scroll-bars . t) (display-type . color) (background-mode . dark) (cursor-color . "SteelBlue1") (environment) (frame-id . "0BA3-BE63-BAC0-0CEB") (frameset--mini t . t) (modeline . t) (minibuffer . t) (unsplittable) (icon-name) (display . "Yukang.local") (explicit-name) (tool-bar-position . top) (visibility . t) (height . 53) (width . 182) (left . 0) (top . 0)) ((min-height . 4) (min-width . 20) (min-height-ignore . 2) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 4)) hc (total-height . 52) (total-width . 182) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (total-height . 52) (total-width . 91) (normal-height . 1.0) (normal-width . 0.5) (buffer "*inferior-lisp*" (selected . t) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars 15 0 t nil) (vscroll . 0) (dedicated) (point . 3998) (start . 1748))) (leaf (last . t) (total-height . 52) (total-width . 91) (normal-height . 1.0) (normal-width . 0.5) (buffer "2.1.scm" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars 15 0 t nil) (vscroll . 0) (dedicated) (point . 1239) (start . 851)))))))
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '("doc" "dc" "egg" "chi" "let" "program" "exp" "make-define" "run-" "num-val" "gram" "parser" "scan&" "equal-ex" "printq" "print"))
(setq regexp-search-ring nil)
(setq register-alist (list '(106 . "splay-time-24hr-format t)\n(setq display-time-day-and-date t)\n(display-time)\n(global-set-key [C-tab] \"\\C-q\\t\")\n(setq message-log-max nil)\n(setq ring-bell-function 'ignore)\n\n(load \"desktop\") \n(desktop-save-mode)\n;(setq mac-option-modifier 'hyper) ; sets the Option key as Hyper\n;(setq mac-option-modifier 'super) ; sets the Option key as Super\n;(setq mac-command-modifier 'meta) ; sets the Command key as Meta\n;(setq mac-control-modifier 'ctrl) ; sets the Control key as Meta\n\n(show-paren-mode)\n(require 'linum)\n\n(require 'ido)\n(ido-mode t)\n\n(require 'ibuffer)\n(global-set-key (kbd \"C-x C-b\") 'ibuffer)\n\n\n(defun toggle-fullscreen ()\n  \"Toggle full screen\"\n  (interactive)\n  (set-frame-parameter\n   nil 'fullscreen\n   (when (not (frame-parameter nil 'fullscreen)) 'fullscreen))\n  (if (frame-parameter nil 'fullscreen)\n      (display-time-mode 1))\n  (if (not (frame-parameter nil 'fullscreen))\n      (display-time-mode 0))\n  )\n\n(toggle-fullscreen)\n\n(load-file \"~/.emacs.d/anything.el\")\n;(load-file \"~/.emacs.d/anything-match-plugin.el\")\n(require 'anything-complete)\n;; Bind C-o to complete shell history\n(anything-complete-shell-history-setup-key \"\\C-o\")\n\n(global-set-key (kbd \"C-x C-f\") 'ido-find-file)\n(global-set-key (kbd \"C-x f\") 'ido-find-file)\n(global-set-key (kbd \"C-x m\") 'anything-execute-extended-command)\n;;(global-set-key (kbd \"C-x m\") 'execute-extended-command)\n(global-set-key (kbd \"C-c C-m\") 'anything-execute-extended-command)\n(global-set-key (kbd \"C-c m\")   'anything-execute-extended-command)\n\n\n\n(setq auto-mode-alist\n      (append '((\"\\\\.cpp$\" . c++-mode)\n		(\"\\\\.hpp$\" . c++-mode)\n		(\"\\\\.h$\" . c++-mode)\n		(\"\\\\.hh$\" . c++-mode)\n		(\"\\\\.lsp$\" . lisp-mode)\n		(\"\\\\.lisp$\" . lisp-mode)\n		(\"\\\\.scm$\" . scheme-mode)\n		(\"\\\\.pl$\" . perl-mode)\n		(\"\\\\.hs$\". haskell-mode)\n		(\"\\\\.vhd$\" . text-mode)\n		(\"\\\\.rb$\"  . ruby-mode)\n		(\"\\\\.rake$\" . ruby-mode)\n		(\"Gemfile\" . ruby-mode)\n		(\"\\\\.scss$\" . css-mode)\n") (desktop-list* 51 (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk)) (desktop-list* 50 (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk)) '(49 . "(require 'highlight-current-line)\n(highlight-current-line-minor-mode)\n\n(require 'highlight-parentheses)\n(defun turn-on-highlight-parentheses-mode ()\n(highlight-parentheses-mode t))\n(define-global-minor-mode global-highlight-parentheses-mode\n  highlight-parentheses-mode\n  turn-on-highlight-parentheses-mode)\n(global-highlight-parentheses-mode)\n(setq hl-paren-background-colors '(\"green\"))\n(global-set-key (kbd \"C-'\") 'highlight-symbol-next)\n\n(load-file \"~/.emacs.d/viewer.el\")\n") '(114 . "splay-time-24hr-format t)\n(setq display-time-day-and-date t)\n(display-time)\n(global-set-key [C-tab] \"\\C-q\\t\")\n(setq message-log-max nil)\n(setq ring-bell-function 'ignore)\n\n(load \"desktop\") \n(desktop-save-mode)\n;(setq mac-option-modifier 'hyper) ; sets the Option key as Hyper\n;(setq mac-option-modifier 'super) ; sets the Option key as Super\n;(setq mac-command-modifier 'meta) ; sets the Command key as Meta\n;(setq mac-control-modifier 'ctrl) ; sets the Control key as Meta\n\n(show-paren-mode)\n(require 'linum)\n\n(require 'ido)\n(ido-mode t)\n\n(require 'ibuffer)\n(global-set-key (kbd \"C-x C-b\") 'ibuffer)\n\n\n(defun toggle-fullscreen ()\n  \"Toggle full screen\"\n  (interactive)\n  (set-frame-parameter\n   nil 'fullscreen\n   (when (not (frame-parameter nil 'fullscreen)) 'fullscreen))\n  (if (frame-parameter nil 'fullscreen)\n      (display-time-mode 1))\n  (if (not (frame-parameter nil 'fullscreen))\n      (display-time-mode 0))\n  )\n\n(toggle-fullscreen)\n\n(load-file \"~/.emacs.d/anything.el\")\n;(load-file \"~/.emacs.d/anything-match-plugin.el\")\n(require 'anything-complete)\n;; Bind C-o to complete shell history\n(anything-complete-shell-history-setup-key \"\\C-o\")\n\n(global-set-key (kbd \"C-x C-f\") 'ido-find-file)\n(global-set-key (kbd \"C-x f\") 'ido-find-file)\n(global-set-key (kbd \"C-x m\") 'anything-execute-extended-command)\n;;(global-set-key (kbd \"C-x m\") 'execute-extended-command)\n(global-set-key (kbd \"C-c C-m\") 'anything-execute-extended-command)\n(global-set-key (kbd \"C-c m\")   'anything-execute-extended-command)\n\n\n\n(setq auto-mode-alist\n      (append '((\"\\\\.cpp$\" . c++-mode)\n		(\"\\\\.hpp$\" . c++-mode)\n		(\"\\\\.h$\" . c++-mode)\n		(\"\\\\.hh$\" . c++-mode)\n		(\"\\\\.lsp$\" . lisp-mode)\n		(\"\\\\.lisp$\" . lisp-mode)\n		(\"\\\\.scm$\" . scheme-mode)\n		(\"\\\\.pl$\" . perl-mode)\n		(\"\\\\.hs$\". haskell-mode)\n		(\"\\\\.vhd$\" . text-mode)\n		(\"\\\\.rb$\"  . ruby-mode)\n		(\"\\\\.rake$\" . ruby-mode)\n		(\"Gemfile\" . ruby-mode)\n		(\"\\\\.scss$\" . css-mode)\n		(\"Rakefile\" . ruby-mode)\n")))
(setq file-name-history '("~/code/eopl/ch2/2.1.scm" "/Users/kang/code/eopl/libs/scheme48-init.scm" "~/code/eopl/ch2/2.5.scm" "/Users/kang/code/eopl/ch2/2.5.scm" "/Users/kang/code/eopl/ch2/2.5" "/Users/kang/code/eopl/ch3/3.3.scm" "~/code/eopl/ch2/" "/Users/kang/code/eopl/ch3/3.3.scm" "/Users/kang/.emacs.d/swank-chicken/README" "/Users/kang/.emacs" "/Users/kang/Downloads/chicken-4.8.0.4/demo/a.scm" "/Users/kang/.emacs" "/Users/kang/Downloads/chicken-4.8.0.4/demo/a.scm" "/Users/kang/code/eopl/ch2/2.4.scm" "/Users/kang/Downloads/chicken-4.8.0.4/a.scm" "/Users/kang/.emacs.d/.gitignore" "/Users/kang/code/eopl/ch3/3.3.scm" "/Users/kang/code/eopl/README.md" "/Users/kang/code/eopl/base/chapter3/proc-lang/proc-rep/tests.scm" "/Users/kang/Downloads/eopl/chapter3/let-lang/drscheme-init.scm" "/Users/kang/Downloads/eopl/chapter3/let-lang/environments.scm" "/Users/kang/code/eopl/libs/scheme48-init.scm" "/Users/kang/code/eopl/libs/6-grammar.scm" "/Users/kang/Downloads/eopl/chapter2/utils.scm" "/Users/kang/code/eopl/libs/sllgen.scm" "/Users/kang/code/eopl/ch3/3.3.scm" "/Users/kang/code/eopl/libs/test-suite.scm" "/Users/kang/code/eopl/libs/test-harness.scm" "/Users/kang/code/eopl/libs/scheme48-init.scm" "/Users/kang/code/eopl/libs/scm-init.scm"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 206
  "/Users/kang/code/eopl/ch2/2.1.scm"
  "2.1.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  1239
  '(nil nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/.emacs"
  ".emacs"
  'emacs-lisp-mode
  '(global-auto-revert-mode hi-lock-mode highlight-symbol-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode auto-indent-minor-mode)
  2558
  '(21073 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  nil
  "ch2"
  'dired-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode dired-omit-mode)
  220
  '(nil nil)
  t
  '("/Users/kang/code/eopl/ch2/")
  nil)

(desktop-create-buffer 206
  "/Users/kang/code/eopl/ch2/2.5.scm"
  "2.5.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  311
  '(594 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/code/eopl/ch2/2.12.scm"
  "2.12.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  54
  '(1 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/code/eopl/libs/scheme48-init.scm"
  "scheme48-init.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  390
  '(304 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/code/eopl/ch3/3.3.scm"
  "3.3.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  99
  '(100 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/code/eopl/ch2/2.4.scm"
  "2.4.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  84
  '(84 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/Downloads/chicken-4.8.0.4/demo/a.scm"
  "a.scm"
  'scheme-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode slime-mode eldoc-mode)
  120
  '(nil nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/code/Ruby/tinyrb/vm/grammar.c"
  "grammar.c"
  'c-mode
  '(abbrev-mode global-auto-revert-mode hi-lock-mode highlight-symbol-mode highlight-parentheses-mode undo-tree-mode auto-complete-mode xgtags-mode hs-minor-mode)
  3080
  '(98337 nil)
  nil
  nil
  '((tab-width . 4) (indent-tabs-mode) (buffer-file-coding-system . undecided-unix)))

(desktop-create-buffer 206
  "/Users/kang/.emacs.d/swank-chicken/README"
  "README"
  'fundamental-mode
  '(global-auto-revert-mode hi-lock-mode highlight-parentheses-mode undo-tree-mode)
  337
  '(57 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix)))

